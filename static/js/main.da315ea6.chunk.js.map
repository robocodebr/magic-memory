{"version":3,"sources":["components/SingleCard.js","App.js","index.js"],"names":["SingleCard","card","handleChoice","flipped","disabled","className","src","alt","onClick","cardImages","matched","App","useState","cards","setCards","turns","setTurns","choiceOne","setChoiceOne","choiceTwo","setChoiceTwo","setDisabled","shuffleCards","shuffledCards","sort","Math","random","map","id","console","log","useEffect","prevCards","resetTurn","setTimeout","prevTurns","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uQAEe,SAASA,EAAT,GAAgE,IAA1CC,EAAyC,EAAzCA,KAAMC,EAAmC,EAAnCA,aAAcC,EAAqB,EAArBA,QAASC,EAAY,EAAZA,SAQhE,OACE,qBAAKC,UAAU,OAAf,SACE,sBAAKA,UAAWF,EAAU,UAAY,GAAtC,UACE,qBAAKE,UAAU,QAAQC,IAAKL,EAAKK,IAAKC,IAAI,eAC1C,qBAAKF,UAAU,OAAOC,IAAI,+EAA+EE,QAV3F,WACbJ,GACHF,EAAaD,IAQoHM,IAAI,eCV3I,IAAME,EAAa,CAClB,CAAEH,IAAK,kFAAmFI,SAAS,GACnG,CAAEJ,IAAK,kFAAmFI,SAAS,GACnG,CAAEJ,IAAK,gFAAiFI,SAAS,GACjG,CAAEJ,IAAK,kFAAmFI,SAAS,GACnG,CAAEJ,IAAK,kFAAmFI,SAAS,GACnG,CAAEJ,IAAK,iFAAkFI,SAAS,IAwFpFC,MArFf,WACC,MAA4BC,mBAAS,IAArC,mBAAQC,EAAR,KAAeC,EAAf,KACA,EAA4BF,mBAAS,GAArC,mBAAQG,EAAR,KAAeC,EAAf,KACA,EAAoCJ,mBAAS,MAA7C,mBAAQK,EAAR,KAAmBC,EAAnB,KACA,EAAoCN,mBAAS,MAA7C,mBAAQO,EAAR,KAAmBC,EAAnB,KACA,EAAkCR,oBAAS,GAA3C,mBAAQR,EAAR,KAAkBiB,EAAlB,KAGMC,EAAe,WACpB,IAAMC,EAAgB,UAAKd,EAAeA,GACxCe,MAAK,kBAAMC,KAAKC,SAAW,MAC3BC,KAAI,SAAC1B,GAAD,mBAAC,eAAeA,GAAhB,IAAsB2B,GAAIH,KAAKC,cAErCR,EAAa,MACbE,EAAa,MACbN,EAASS,GACTP,EAAS,IAIJd,EAAe,SAACD,GACrB4B,QAAQC,IAAI7B,GACZgB,EAAYG,EAAanB,GAAQiB,EAAajB,IAI/C8B,qBACC,WACKd,GAAaE,IAChBE,GAAY,GAERJ,EAAUX,MAAQa,EAAUb,KAC/BQ,GAAS,SAACkB,GACT,OAAOA,EAAUL,KAAI,SAAC1B,GACrB,OAAIA,EAAKK,MAAQW,EAAUX,IACnB,2BAAKL,GAAZ,IAAkBS,SAAS,IAEpBT,QAIVgC,KAEAC,YAAW,kBAAMD,MAAa,QAIjC,CAAEhB,EAAWE,IAId,IAAMc,EAAY,WACjBf,EAAa,MACbE,EAAa,MACbJ,GAAS,SAACmB,GAAD,OAAeA,EAAY,KACpCd,GAAY,IAQb,OAJAU,qBAAU,WACTT,MACE,IAGF,sBAAKjB,UAAU,MAAf,UACC,6CACA,wBAAQG,QAASc,EAAjB,sBAEA,qBAAKjB,UAAU,YAAf,SACEQ,EAAMc,KAAI,SAAC1B,GAAD,OACV,cAAC,EAAD,CAECA,KAAMA,EACNC,aAAcA,EACdC,QAASF,IAASgB,GAAahB,IAASkB,GAAalB,EAAKS,QAC1DN,SAAUA,GAJLH,EAAK2B,SASb,wCAAWb,SCxFdqB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.da315ea6.chunk.js","sourcesContent":["import './SingleCard.css'\n\nexport default function SingleCard({ card, handleChoice, flipped, disabled }) {\n\n  const handleClick = () => {\n    if (!disabled) {\n      handleChoice(card)\n    }\n  }\n\n  return (\n    <div className=\"card\">\n      <div className={flipped ? \"flipped\" : \"\"}>\n        <img className=\"front\" src={card.src} alt=\"card front\" />\n        <img className=\"back\" src=\"https://raw.githubusercontent.com/robocodebr/magic-memory/main/img/cover.png\" onClick={handleClick} alt=\"cover\" />\n      </div>\n    </div>\n  )\n}\n","import { useState, useEffect } from 'react';\nimport './App.css';\nimport SingleCard from './components/SingleCard';\n\nconst cardImages = [\n\t{ src: 'https://raw.githubusercontent.com/robocodebr/magic-memory/main/img/helmet-1.png', matched: false },\n\t{ src: 'https://raw.githubusercontent.com/robocodebr/magic-memory/main/img/potion-1.png', matched: false },\n\t{ src: 'https://raw.githubusercontent.com/robocodebr/magic-memory/main/img/ring-1.png', matched: false },\n\t{ src: 'https://raw.githubusercontent.com/robocodebr/magic-memory/main/img/scroll-1.png', matched: false },\n\t{ src: 'https://raw.githubusercontent.com/robocodebr/magic-memory/main/img/shield-1.png', matched: false },\n\t{ src: 'https://raw.githubusercontent.com/robocodebr/magic-memory/main/img/sword-1.png', matched: false }\n];\n\nfunction App() {\n\tconst [ cards, setCards ] = useState([]);\n\tconst [ turns, setTurns ] = useState(0);\n\tconst [ choiceOne, setChoiceOne ] = useState(null);\n\tconst [ choiceTwo, setChoiceTwo ] = useState(null);\n\tconst [ disabled, setDisabled ] = useState(false);\n\n\t// shuffle cards for new game\n\tconst shuffleCards = () => {\n\t\tconst shuffledCards = [ ...cardImages, ...cardImages ]\n\t\t\t.sort(() => Math.random() - 0.5)\n\t\t\t.map((card) => ({ ...card, id: Math.random() }));\n\n\t\tsetChoiceOne(null);\n\t\tsetChoiceTwo(null);\n\t\tsetCards(shuffledCards);\n\t\tsetTurns(0);\n\t};\n\n\t// handle a choice\n\tconst handleChoice = (card) => {\n\t\tconsole.log(card);\n\t\tchoiceOne ? setChoiceTwo(card) : setChoiceOne(card);\n\t};\n\n\t// compare 2 selected cards\n\tuseEffect(\n\t\t() => {\n\t\t\tif (choiceOne && choiceTwo) {\n\t\t\t\tsetDisabled(true);\n\n\t\t\t\tif (choiceOne.src === choiceTwo.src) {\n\t\t\t\t\tsetCards((prevCards) => {\n\t\t\t\t\t\treturn prevCards.map((card) => {\n\t\t\t\t\t\t\tif (card.src === choiceOne.src) {\n\t\t\t\t\t\t\t\treturn { ...card, matched: true };\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\treturn card;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t\t\tresetTurn();\n\t\t\t\t} else {\n\t\t\t\t\tsetTimeout(() => resetTurn(), 1000);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t[ choiceOne, choiceTwo ]\n\t);\n\n\t// reset choices & increase turn\n\tconst resetTurn = () => {\n\t\tsetChoiceOne(null);\n\t\tsetChoiceTwo(null);\n\t\tsetTurns((prevTurns) => prevTurns + 1);\n\t\tsetDisabled(false);\n\t};\n\n\t// start new game automagically\n\tuseEffect(() => {\n\t\tshuffleCards();\n\t}, []);\n\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<h1>Magic Match</h1>\n\t\t\t<button onClick={shuffleCards}>New Game</button>\n\n\t\t\t<div className=\"card-grid\">\n\t\t\t\t{cards.map((card) => (\n\t\t\t\t\t<SingleCard\n\t\t\t\t\t\tkey={card.id}\n\t\t\t\t\t\tcard={card}\n\t\t\t\t\t\thandleChoice={handleChoice}\n\t\t\t\t\t\tflipped={card === choiceOne || card === choiceTwo || card.matched}\n\t\t\t\t\t\tdisabled={disabled}\n\t\t\t\t\t/>\n\t\t\t\t))}\n\t\t\t</div>\n\n\t\t\t<p>Turns: {turns}</p>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}